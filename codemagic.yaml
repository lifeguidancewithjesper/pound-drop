workflows:
  react-native-ios:
    name: Pound Drop iOS - Flow Syntax Fix
    max_build_duration: 60
    instance_type: mac_mini_m2
    integrations:
      app_store_connect: codemagic
    cache:
      cache_paths:
        - $CM_BUILD_DIR/node_modules
        - ~/.npm
        - $CM_BUILD_DIR/ios/Pods
        - ~/Library/Caches/CocoaPods
        - ~/Library/Developer/Xcode/DerivedData
    environment:
      ios_signing:
        certificates:
          - pound-drop-ios-distribution
        provisioning_profiles:
          - pound-drop-app-store-profile
      vars:
        BUNDLE_ID: "com.lifeguidancewithjesper.pounddrop"
        APPLE_TEAM_ID: "8VKM26D99V"
        XCODE_VERSION: "16.1"
        CM_BUILD_DIR: "./mobile-app/pound-drop-fresh"
    scripts:
      - name: Install dependencies and fix Flow syntax
        script: |
          echo "=== Current directory and structure ==="
          pwd
          ls -la
          
          echo "=== Installing Dependencies ==="
          npm ci --legacy-peer-deps || npm install --legacy-peer-deps
          npm install @expo/cli@latest --legacy-peer-deps
          
          echo "=== Install Flow Support ==="
          npm install @babel/preset-flow --legacy-peer-deps
          npm install @babel/plugin-syntax-flow --legacy-peer-deps
          
          echo "=== Update to Compatible Package Versions ==="
          npm install react-native-screens@~4.8.0 --legacy-peer-deps
          npm install react-native-safe-area-context@~5.1.0 --legacy-peer-deps
          
          echo "=== Git Conflict Cleanup ==="
          find . -type f \( -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" -o -name "*.json" \) -print0 | while IFS= read -r -d '' file; do
            if grep -q "<<<<<<< \\|======= \\|>>>>>>> " "$file" 2>/dev/null; then
              echo "Cleaning conflicts from: $file"
              sed -i.bak '/<<<<<<< /,/>>>>>>> /d' "$file"
              sed -i.bak '/=======/d' "$file"
            fi
          done
          
          echo "=== Creating Babel Config with Flow Support ==="
          echo '{
            "presets": [
              ["babel-preset-expo", {"jsxImportSource": "react"}],
              "@babel/preset-flow"
            ],
            "plugins": [
              "@babel/plugin-syntax-flow",
              ["@babel/plugin-transform-flow-strip-types", {"all": true}]
            ]
          }' > babel.config.js
          
          echo "=== Creating Flow-Compatible Metro Config ==="
          echo 'const { getDefaultConfig } = require("expo/metro-config");
          const config = getDefaultConfig(__dirname);
          
          config.transformer.babelTransformerPath = require.resolve("metro-react-native-babel-transformer");
          config.transformer.minifierConfig = {
            keep_fnames: true,
            mangle: { keep_fnames: true }
          };
          
          config.resolver.sourceExts = [...config.resolver.sourceExts, "jsx", "js", "ts", "tsx"];
          
          module.exports = config;' > metro.config.js
          
          echo "=== Creating Simplified app.json ==="
          echo '{
            "expo": {
              "name": "Pound Drop",
              "slug": "pound-drop", 
              "version": "1.0.0",
              "orientation": "portrait",
              "userInterfaceStyle": "automatic",
              "splash": {
                "backgroundColor": "#4F46E5",
                "resizeMode": "contain"
              },
              "ios": {
                "supportsTablet": true,
                "bundleIdentifier": "com.lifeguidancewithjesper.pounddrop",
                "buildNumber": "19",
                "infoPlist": {
                  "NSCameraUsageDescription": "Take photos of your meals for tracking",
                  "NSPhotoLibraryUsageDescription": "Select photos from your library for meal logging", 
                  "NSUserNotificationUsageDescription": "Send reminders for meal logging and habit tracking",
                  "ITSAppUsesNonExemptEncryption": false
                }
              },
              "android": {
                "package": "com.lifeguidancewithjesper.pounddrop",
                "versionCode": 1
              },
              "plugins": [
                "expo-notifications",
                "expo-camera",
                "expo-image-picker", 
                "expo-secure-store"
              ]
            }
          }' > app.json
          
          echo "=== Creating Clean index.js ==="
          echo 'import { registerRootComponent } from "expo";
          import App from "./App";
          
          registerRootComponent(App);' > index.js
          
          echo "=== Verifying JavaScript Syntax ==="
          node -c index.js || { 
            echo "ERROR: index.js has syntax errors"
            cat index.js
            exit 1
          }
          
          echo "=== Running Expo Install Fix ==="
          npx expo install --fix || echo "Expo install fix completed"
          npx expo doctor || echo "Expo doctor completed"

      - name: Prebuild iOS project with Flow compatibility
        script: |
          echo "=== Expo Prebuild for iOS ==="
          echo "Current directory: $(pwd)"
          export CI=1
          export BABEL_ENV=production
          export NODE_ENV=production
          
          rm -rf ios/ 2>/dev/null || true
          
          npx expo prebuild --platform ios --non-interactive || { 
            echo "ERROR: Expo prebuild failed"
            echo "Directory contents:"
            ls -la
            echo "App.json contents:"
            cat app.json
            echo "Babel config:"
            cat babel.config.js
            exit 1
          }
          
          echo "=== Verifying iOS Project Created ==="
          ls -la ios/ || { echo "ERROR: iOS directory not created"; exit 1; }
          find ios -name "*.xcworkspace" -print || { echo "ERROR: No .xcworkspace found"; exit 1; }

      - name: Set up code signing
        script: |
          echo "=== Setting up code signing ==="
          keychain add-certificates || { echo "ERROR: Certificate setup failed"; exit 1; }
          xcode-project use-profiles || { echo "ERROR: Provisioning profile setup failed"; exit 1; }

      - name: Install CocoaPods with cleanup
        script: |
          echo "=== Installing CocoaPods ==="
          cd ios
          echo "CocoaPods directory: $(pwd)"
          
          rm -rf Pods/ Podfile.lock 2>/dev/null || true
          
          pod install --repo-update || { 
            echo "ERROR: CocoaPods installation failed"
            echo "Podfile contents:"
            cat Podfile || true
            exit 1
          }
          
          echo "=== Verifying Pods Installation ==="
          ls -la Pods/ || { echo "ERROR: Pods directory not created"; exit 1; }

      - name: Build iOS app with Flow and Swift fixes
        script: |
          echo "=== Building iOS App for App Store ==="
          echo "Using Xcode version: $(xcodebuild -version)"
          echo "Current directory: $(pwd)"
          set -eo pipefail
          
          export BABEL_ENV=production
          export NODE_ENV=production
          
          WORKSPACE=$(find ios -maxdepth 1 -name "*.xcworkspace" -print -quit)
          if [ -z "$WORKSPACE" ]; then
            echo "ERROR: No .xcworkspace found in ios/"
            ls -la ios/
            exit 1
          fi
          echo "Using workspace: $WORKSPACE"
          
          echo "=== Finding App Scheme ==="
          SCHEMES=$(xcodebuild -list -workspace "$WORKSPACE" 2>/dev/null | sed -n '/Schemes:/,/^$/p' | sed '1d;$d' | sed 's/^[[:space:]]*//')
          echo "Available schemes:"
          echo "$SCHEMES"
          
          SCHEME=""
          for s in "PoundDrop" "Pound Drop" "pounddrop" "pound-drop" "pounddrop-2024"; do
            if echo "$SCHEMES" | grep -Fx "$s" >/dev/null 2>&1; then
              SCHEME="$s"
              break
            fi
          done
          
          if [ -z "$SCHEME" ]; then
            SCHEME=$(echo "$SCHEMES" | grep -v "^Pods-" | head -n1)
          fi
          
          if [ -z "$SCHEME" ]; then
            echo "ERROR: No suitable app scheme found"
            echo "All available schemes:"
            echo "$SCHEMES"
            exit 1
          fi
          
          echo "Using scheme: $SCHEME"
          
          echo "=== Starting iOS Archive Build ==="
          xcode-project build-ipa \
            --workspace "$WORKSPACE" \
            --scheme "$SCHEME" \
            --config Release \
            --archive-xcargs "SWIFT_OPTIMIZATION_LEVEL=-Onone ENABLE_PREVIEWS=NO DEVELOPMENT_TEAM=$APPLE_TEAM_ID CODE_SIGN_IDENTITY='iPhone Distribution' CODE_SIGN_STYLE=Manual COMPILER_INDEX_STORE_ENABLE=NO" \
            --archive-flags "-destination 'generic/platform=iOS'" || {
              echo "ERROR: iOS build failed"
              echo "Final build directory contents:"
              ls -la build/ 2>/dev/null || echo "No build directory"
              exit 1
            }
          
          echo "=== Build Completed Successfully ==="
          ls -la build/ios/ipa/ || echo "IPA directory check"

    artifacts:
      - build/ios/ipa/*.ipa
      - ios/build/logs/*.log
      - /tmp/xcodebuild_logs/*.log

    publishing:
      app_store_connect:
        auth: integration
