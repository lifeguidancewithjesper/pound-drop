workflows:
  react-native-ios:
    name: Pound Drop iOS - Correct Package Versions
    max_build_duration: 120
    instance_type: mac_mini_m2
    integrations:
      app_store_connect: codemagic
    environment:
      ios_signing:
        certificates:
          - pound-drop-ios-distribution
        provisioning_profiles:
          - pound-drop-app-store-profile
      vars:
        BUNDLE_ID: "com.lifeguidancewithjesper.pounddrop"
        APPLE_TEAM_ID: "8VKM26D99V"
        XCODE_VERSION: "16.1"
        CM_BUILD_DIR: "./mobile-app/pound-drop-fresh"
    scripts:
      - name: Fix global expo permissions
        script: |
          echo "=== CRITICAL FIX: Global Expo Binary Permissions ==="
          sudo chmod +x /Users/builder/clone/node_modules/.bin/* 2>/dev/null || true
          chmod +x node_modules/.bin/* 2>/dev/null || true

      - name: Install correct dependencies for Expo SDK 52
        script: |
          echo "=== Installing Correct Dependencies for Expo SDK 52 ==="
          npm ci --legacy-peer-deps || npm install --legacy-peer-deps
          npm install @expo/cli@latest --legacy-peer-deps
          
          echo "=== Installing Expo SDK 52 Compatible Packages ==="
          # Install the correct versions for Expo SDK 52
          npm install react-native@~0.77.1 --legacy-peer-deps
          npm install react-native-screens@~4.8.0 --legacy-peer-deps  
          npm install react-native-safe-area-context@~5.1.0 --legacy-peer-deps
          npm install react-native-gesture-handler@~2.22.0 --legacy-peer-deps
          npm install react-native-reanimated@~3.16.7 --legacy-peer-deps
          
          echo "=== Running Expo Install Fix ==="
          npx expo install --fix

      - name: Fix JavaScript files and test expo
        script: |
          echo "=== Fixing Potential JavaScript Issues ==="
          
          # Check for and remove Git conflict markers
          find . -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | xargs grep -l "<<<<<<< " 2>/dev/null | while read file; do
            echo "WARNING: Found conflict markers in $file"
            sed -i.bak '/<<<<<<< /,/>>>>>>> /d' "$file"
          done
          
          # Ensure proper entry point
          if [ ! -f "index.js" ]; then
            echo "Creating index.js entry point"
            echo "import { registerRootComponent } from 'expo';" > index.js
            echo "import App from './App';" >> index.js
            echo "" >> index.js
            echo "registerRootComponent(App);" >> index.js
          fi
          
          # Verify entry point syntax
          echo "=== Checking JavaScript Syntax ==="
          node -c index.js || { echo "ERROR: index.js has syntax errors"; cat index.js; exit 1; }
          
          # Test expo access
          npx expo --version || { echo "ERROR: Expo CLI failed"; exit 1; }
          npx expo doctor || echo "Expo doctor completed"

      - name: Clean prebuild iOS project
        script: |
          echo "=== Clean Expo Prebuild for iOS ==="
          export CI=1
          
          # Remove any existing iOS build
          rm -rf ios/ 2>/dev/null || true
          
          npx expo prebuild --platform ios --clean --non-interactive || { 
            echo "ERROR: Expo prebuild failed"
            exit 1
          }
          
          ls -la ios/ || { echo "ERROR: iOS directory not created"; exit 1; }

      - name: Set up code signing
        script: |
          echo "=== Setting up code signing ==="
          keychain add-certificates
          xcode-project use-profiles

      - name: Clean install CocoaPods dependencies
        script: |
          echo "=== Clean Installing CocoaPods dependencies ==="
          cd ios
          # Clean pod installation
          rm -rf Pods/ Podfile.lock 2>/dev/null || true
          pod install --repo-update --clean-install

      - name: Build iOS app with correct versions
        script: |
          echo "=== Building iOS App for App Store ==="
          echo "Using Xcode version: $(xcodebuild -version)"
          set -eo pipefail
          
          # Find workspace
          WORKSPACE=$(find ios -maxdepth 1 -name "*.xcworkspace" -print -quit)
          if [ -z "$WORKSPACE" ]; then
            echo "No .xcworkspace found in ios/"
            ls -la ios/
            exit 1
          fi
          echo "Using workspace: $WORKSPACE"
          
          # Find the correct scheme (exclude Pods-* schemes)
          SCHEMES=$(xcodebuild -list -workspace "$WORKSPACE" | sed -n '/Schemes:/,/^$/p' | sed '1d;$d' | sed 's/^[[:space:]]*//')
          echo "Available schemes:"
          echo "$SCHEMES"
          
          # Select the main app scheme (exclude Pods-* schemes)
          SCHEME=""
          for s in PoundDrop "Pound Drop" pounddrop pound-drop; do
            if echo "$SCHEMES" | grep -Fx "$s" >/dev/null; then
              SCHEME="$s"
              break
            fi
          done
          
          # If still not found, get first non-Pods scheme
          if [ -z "$SCHEME" ]; then
            SCHEME=$(echo "$SCHEMES" | grep -v "^Pods-" | head -n1)
          fi
          
          if [ -z "$SCHEME" ]; then
            echo "ERROR: No suitable app scheme found"
            echo "Available schemes were:"
            echo "$SCHEMES"
            exit 1
          fi
          
          echo "Using scheme: $SCHEME"
          
          # Build with all compatibility fixes
          xcode-project build-ipa \
            --workspace "$WORKSPACE" \
            --scheme "$SCHEME" \
            --config Release \
            --archive-xcargs "SWIFT_OPTIMIZATION_LEVEL=-Onone ENABLE_PREVIEWS=NO DEVELOPMENT_TEAM=$APPLE_TEAM_ID CODE_SIGN_IDENTITY='iPhone Distribution' CODE_SIGN_STYLE=Manual COMPILER_INDEX_STORE_ENABLE=NO" \
            --archive-flags "-destination 'generic/platform=iOS'"

    artifacts:
      - build/ios/ipa/*.ipa
      - ios/build/logs/*.log

    publishing:
      app_store_connect:
        auth: integration
