workflows:
  react-native-ios:
    name: Pound Drop iOS - WORKING BUILD
    max_build_duration: 120
    instance_type: mac_mini_m2
    integrations:
      app_store_connect: codemagic
    cache:
      cache_paths:
        - ~/.npm
        - ~/Library/Caches/CocoaPods
        - ~/Library/Developer/Xcode/DerivedData
    environment:
      ios_signing:
        certificates:
          - pound-drop-ios-distribution
        provisioning_profiles:
          - pound-drop-app-store-profile
      vars:
        BUNDLE_ID: "com.lifeguidancewithjesper.pounddrop"
        APPLE_TEAM_ID: "8VKM26D99V"
        XCODE_VERSION: "16.1"
        NODE_VERSION: "18"
    scripts:
      - name: Find and setup mobile app
        script: |
          echo "=== Repository structure ==="
          ls -la
          echo "=== Mobile app directories ==="
          ls -la mobile-app/
          
          echo "=== Finding complete app directory ==="
          if [ -d "mobile-app/pound-drop-fresh" ] && [ -f "mobile-app/pound-drop-fresh/App.tsx" ]; then
            APP_DIR="mobile-app/pound-drop-fresh"
          elif [ -d "mobile-app/pound-drop-mobile" ] && [ -f "mobile-app/pound-drop-mobile/App.tsx" ]; then
            APP_DIR="mobile-app/pound-drop-mobile"
          elif [ -d "mobile-app/fresh-pound-drop" ] && [ -f "mobile-app/fresh-pound-drop/App.tsx" ]; then
            APP_DIR="mobile-app/fresh-pound-drop"
          else
            echo "ERROR: No valid mobile app directory found"
            exit 1
          fi
          
          echo "=== Using directory: $APP_DIR ==="
          cd "$APP_DIR"
          echo "Current directory: $(pwd)"
          ls -la
          
          echo "=== Setting up Node.js 18 ==="
          nvm install 18 && nvm use 18
          node --version
          npm --version
          
          echo "=== Verifying files ==="
          test -f App.tsx || { echo "ERROR: App.tsx missing"; exit 1; }
          test -f package.json || { echo "ERROR: package.json missing"; exit 1; }
          echo "âœ“ Core files verified"
          
          echo "=== Installing dependencies ==="
          npm install --legacy-peer-deps
          
          echo "=== Installing Expo CLI globally ==="
          npm install -g @expo/cli@latest
          
          echo "=== Saving app directory for next steps ==="
          echo "$APP_DIR" > /tmp/app_directory

      - name: Prebuild iOS
        script: |
          APP_DIR=$(cat /tmp/app_directory)
          cd "$APP_DIR"
          echo "=== Building in: $(pwd) ==="
          
          export CI=1
          export NODE_ENV=production
          export EXPO_NO_TELEMETRY=1
          
          echo "=== Cleaning iOS ==="
          rm -rf ios/
          
          echo "=== Expo prebuild ==="
          expo prebuild --platform ios --clean --non-interactive || {
            echo "ERROR: Prebuild failed"
            cat app.json
            exit 1
          }
          
          echo "=== iOS project created ==="
          ls -la ios/

      - name: Code signing
        script: |
          keychain add-certificates
          xcode-project use-profiles

      - name: CocoaPods
        script: |
          APP_DIR=$(cat /tmp/app_directory)
          cd "$APP_DIR/ios"
          
          rm -rf Pods/ Podfile.lock
          pod install --repo-update

      - name: Build iOS
        script: |
          APP_DIR=$(cat /tmp/app_directory)
          cd "$APP_DIR"
          
          WORKSPACE=$(find ios -name "*.xcworkspace" | head -1)
          echo "Workspace: $WORKSPACE"
          
          SCHEME=$(xcodebuild -list -workspace "$WORKSPACE" | sed -n '/Schemes:/,/^$/p' | sed '1d;$d' | grep -v "Pods" | head -1 | xargs)
          echo "Scheme: $SCHEME"
          
          xcode-project build-ipa \
            --workspace "$WORKSPACE" \
            --scheme "$SCHEME" \
            --config Release \
            --archive-xcargs "DEVELOPMENT_TEAM=$APPLE_TEAM_ID"
          
          echo "=== SUCCESS! ==="
          ls -la build/ios/ipa/

    artifacts:
      - "*/build/ios/ipa/*.ipa"

    publishing:
      app_store_connect:
        auth: integration
